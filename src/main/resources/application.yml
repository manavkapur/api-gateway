server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: api-gateway

  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:}
      ssl:
        enabled: ${SPRING_REDIS_SSL_ENABLED:false}

  cloud:
    loadbalancer:
      ribbon:
        enabled: false

    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true

      # ✅ Global CORS configuration
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOriginPatterns:
              - "http://localhost:3000"
              - "https://supremebuildsolutions.vercel.app"
            allowedMethods: "*"
            allowedHeaders: "*"
            allowCredentials: true

      # ✅ Deduplicate headers to prevent duplicate CORS entries
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_FIRST

      routes:
        - id: channel-server-ws
          uri: lb://channel-server
          predicates:
            - Path=/ws/**
          filters:
            - name: PreserveHostHeader

        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user-service/**
          filters:
            - name: CircuitBreaker
              args:
                name: userCircuitBreaker
                fallbackUri: forward:/fallback/global

        - id: contact-service
          uri: lb://contact-service
          predicates:
            - Path=/contact-service/**
          filters:
            - name: CircuitBreaker
              args:
                name: contactCircuitBreaker
                fallbackUri: forward:/fallback/global

        - id: quote-service
          uri: lb://quote-service
          predicates:
            - Path=/quote-service/**
          filters:
            - name: CircuitBreaker
              args:
                name: quoteCircuitBreaker
                fallbackUri: forward:/fallback/global

        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/notification-service/**
          filters:
            - name: CircuitBreaker
              args:
                name: notificationCircuitBreaker
                fallbackUri: forward:/fallback/global

        - id: email-service
          uri: lb://email-service
          predicates:
            - Path=/email-service/**
          filters:
            - name: CircuitBreaker
              args:
                name: emailCircuitBreaker
                fallbackUri: forward:/fallback/global

        - id: channel-server
          uri: lb://channel-server
          predicates:
            - Path=/channel-server/**
          filters:
            - name: CircuitBreaker
              args:
                name: channelCircuitBreaker
                fallbackUri: forward:/fallback/global

resilience4j:
  circuitbreaker:
    instances:
      globalCircuitBreaker:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        automaticTransitionFromOpenToHalfOpenEnabled: true

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:https://eureka-server-sk4j.onrender.com/eureka/}
  instance:
    prefer-ip-address: true
    hostname: ${spring.application.name}
    instance-id: ${spring.application.name}:${random.value}

logging:
  level:
    org.springframework.cloud.gateway: INFO
    root: INFO
